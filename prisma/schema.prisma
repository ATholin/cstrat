generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(USER)
  lobbyId       String?
  lobby         Lobby?    @relation("LobbyUsers", fields: [lobbyId], references: [id], onDelete: SetNull)
  ownedLobby    Lobby?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Strategy {
  id          String  @id @default(cuid())
  title       String
  description String
  maps        Map[]
  side        Side?
  approved    Boolean @default(false)
  lobbies     Lobby[]
  likes       Int @default(0)
}

enum Map {
  MIRAGE
  INFERNO
  NUKE
  ANCIENT
  VERTIGO
  OVERPASS
  ANUBIS
  DUST2
  TRAIN
  CACHE
}

enum UserRole {
  ADMIN
  PREMIUM
  USER
}

enum Side {
  COUNTERTERRORISTS
  TERRORISTS
}

model Lobby {
  id         String    @id @default(cuid())
  shareId    String
  strategyId String?
  strategy   Strategy? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  map        Map?
  side       Side?
  ownerId    String?   @unique
  owner      User?     @relation(fields: [ownerId], references: [id])
  users      User[]    @relation("LobbyUsers")
}
